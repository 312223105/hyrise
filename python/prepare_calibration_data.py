# This script is used to join and clean the calibration data for use in the 'cost_models' script
# It takes as arguments the four .csv files that are generated by the cost calibration run on hyrise

import sys
import pandas as pd


def import_train_data(input_data):
    table_scan_data = pd.read_csv(input_data[0])
    table_data = pd.read_csv(input_data[1])
    columns_data = pd.read_csv(input_data[2])
    chunk_meta = pd.read_csv(input_data[3])

    joined_data = table_scan_data.merge(table_data, on=["TABLE_NAME"], how="left")
    joined_data = joined_data.merge(columns_data, on=["TABLE_NAME", "COLUMN_NAME"], how="left")

    # only look at the encoding of the first chunk
    chunkrows = chunk_meta.loc[(chunk_meta['CHUNK_ID'] == 0)]
    joined_data = joined_data.merge(chunkrows, on=["TABLE_NAME", "COLUMN_NAME"], how="left")

    joined_data = joined_data.rename(columns={"INPUT_ROWS_LEFT": "INPUT_ROWS", "CHUNK_SIZE": "MAX_CHUNK_SIZE",
                                              "COLUMN_DATA_TYPE": "DATA_TYPE", "ENCODING_TYPE": "ENCODING",
                                              "TABLE_NAME": "TABLE_NAME", "COLUMN_NAME": "COLUMN_NAME",
                                              "COLUMN_TYPE": "SCAN_TYPE"})
    if 'COMPRESSION_TYPE' in joined_data.columns:
        joined_data = joined_data.drop(labels=['COMPRESSION_TYPE'], axis=1)

    joined_data['SELECTIVITY'] = (joined_data['OUTPUT_ROWS'] / joined_data['INPUT_ROWS'])
    joined_data['SELECTIVITY'].fillna(0, inplace=True)
    return joined_data


def main():
    cal_dat = [arg for arg in sys.argv[1:]]
    test_data = import_train_data(cal_dat)

    #TODO output for piping
